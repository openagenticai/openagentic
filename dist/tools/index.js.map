{"version":3,"sources":["../../src/tools/index.ts","../../src/tools/built-in.ts","../../src/tools/factory.ts"],"sourcesContent":["export * from './built-in';\nexport { createTool } from './factory';","import type { Tool } from '../types';\n\nexport const httpRequestTool: Tool = {\n  name: 'http_request',\n  description: 'Make HTTP requests to external APIs',\n  parameters: {\n    url: {\n      type: 'string',\n      description: 'The URL to make the request to',\n      required: true,\n    },\n    method: {\n      type: 'string',\n      description: 'HTTP method (GET, POST, PUT, DELETE, etc.)',\n      required: false,\n      enum: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'],\n    },\n    headers: {\n      type: 'object',\n      description: 'HTTP headers to include in the request',\n      required: false,\n    },\n    body: {\n      type: 'string',\n      description: 'Request body (for POST, PUT, PATCH requests)',\n      required: false,\n    },\n  },\n  execute: async (params: any) => {\n    const { url, method = 'GET', headers = {}, body } = params;\n    \n    const requestInit: RequestInit = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n    };\n\n    if (body) {\n      requestInit.body = JSON.stringify(body);\n    }\n\n    const response = await fetch(url, requestInit);\n\n    const data = await response.text();\n    \n    return {\n      status: response.status,\n      statusText: response.statusText,\n      headers: Object.fromEntries(response.headers.entries()),\n      data: (() => {\n        try {\n          return JSON.parse(data);\n        } catch {\n          return data;\n        }\n      })(),\n    };\n  },\n  costEstimate: 0.001,\n};\n\nexport const calculatorTool: Tool = {\n  name: 'calculator',\n  description: 'Perform mathematical calculations',\n  parameters: {\n    expression: {\n      type: 'string',\n      description: 'Mathematical expression to evaluate (e.g., \"2 + 2\", \"Math.sqrt(16)\")',\n      required: true,\n    },\n  },\n  execute: async (params: any) => {\n    const { expression } = params;\n    \n    // Basic safety check - only allow safe mathematical operations\n    const safeExpression = expression.replace(/[^0-9+\\-*/.()Math.sqrtpowabsfloorceilminmax ]/g, '');\n    \n    try {\n      // Using Function constructor for safe evaluation\n      const result = new Function('Math', `return ${safeExpression}`)(Math);\n      return { result, expression: safeExpression };\n    } catch (error) {\n      throw new Error(`Invalid mathematical expression: ${expression}`);\n    }\n  },\n  costEstimate: 0,\n};\n\nexport const timestampTool: Tool = {\n  name: 'timestamp',\n  description: 'Get current timestamp and date information',\n  parameters: {\n    format: {\n      type: 'string',\n      description: 'Format for the timestamp (iso, unix, human)',\n      required: false,\n      enum: ['iso', 'unix', 'human'],\n    },\n    timezone: {\n      type: 'string',\n      description: 'Timezone for the timestamp (e.g., \"UTC\", \"America/New_York\")',\n      required: false,\n    },\n  },\n  execute: async (params: any) => {\n    const { format = 'iso', timezone } = params;\n    const now = new Date();\n    \n    switch (format) {\n      case 'unix':\n        return { timestamp: Math.floor(now.getTime() / 1000), format: 'unix' };\n      case 'human':\n        return { \n          timestamp: timezone \n            ? now.toLocaleString('en-US', { timeZone: timezone })\n            : now.toLocaleString(),\n          format: 'human',\n          timezone: timezone || 'local'\n        };\n      default: // iso\n        return { \n          timestamp: timezone \n            ? new Date(now.toLocaleString('en-US', { timeZone: timezone })).toISOString()\n            : now.toISOString(),\n          format: 'iso',\n          timezone: timezone || 'UTC'\n        };\n    }\n  },\n  costEstimate: 0,\n};\n\nexport const builtInTools: Tool[] = [\n  httpRequestTool,\n  calculatorTool,\n  timestampTool,\n];","import type { Tool } from '../types';\n\nexport interface ToolFactory {\n  name: string;\n  description: string;\n  parameters: Record<string, any>;\n  execute: (params: any) => Promise<any> | any;\n  costEstimate?: number;\n}\n\nexport function createTool(factory: ToolFactory): Tool {\n  return {\n    name: factory.name,\n    description: factory.description,\n    parameters: factory.parameters,\n    execute: factory.execute,\n    costEstimate: factory.costEstimate || 0,\n  };\n}\n\nexport function createAsyncTool(\n  name: string,\n  description: string,\n  parameters: Record<string, any>,\n  execute: (params: any) => Promise<any>,\n  costEstimate = 0\n): Tool {\n  return createTool({\n    name,\n    description,\n    parameters,\n    execute,\n    costEstimate,\n  });\n}\n\nexport function createSyncTool(\n  name: string,\n  description: string,\n  parameters: Record<string, any>,\n  execute: (params: any) => any,\n  costEstimate = 0\n): Tool {\n  return createTool({\n    name,\n    description,\n    parameters,\n    execute: async (params) => execute(params),\n    costEstimate,\n  });\n}"],"mappings":"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","names":[]}