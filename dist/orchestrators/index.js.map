{"version":3,"sources":["../../src/providers/index.ts","../../src/orchestrators/index.ts","../../src/core/errors.ts","../../src/core/ai-provider.ts","../../src/core/cost-tracker.ts","../../src/core/tool-registry.ts","../../src/utils/simple-event-emitter.ts","../../src/core/orchestrator.ts","../../src/orchestrators/simple.ts","../../src/orchestrators/conversational.ts","../../src/orchestrators/task.ts","../../src/tools/built-in.ts","../../src/orchestrators/templates.ts"],"sourcesContent":["import type { AIModel } from '../types';\n\n// Provider configuration with model metadata\nexport const providerConfigs = {\n  openai: {\n    baseURL: 'https://api.openai.com/v1',\n    models: {\n      'gpt-4': { \n        contextWindow: 8192, \n        cost: { input: 0.03, output: 0.06 },\n        description: 'Most capable GPT-4 model'\n      },\n      'gpt-4-turbo': { \n        contextWindow: 128000, \n        cost: { input: 0.01, output: 0.03 },\n        description: 'GPT-4 Turbo with larger context window'\n      },\n      'gpt-4o': { \n        contextWindow: 128000, \n        cost: { input: 0.005, output: 0.015 },\n        description: 'GPT-4 Omni - fastest and most cost-effective'\n      },\n      'gpt-4o-mini': { \n        contextWindow: 128000, \n        cost: { input: 0.00015, output: 0.0006 },\n        description: 'Smaller, faster GPT-4o variant'\n      },\n      'o3': { \n        contextWindow: 200000, \n        cost: { input: 0.06, output: 0.24 },\n        description: 'Latest reasoning model'\n      },\n      'o3-mini': { \n        contextWindow: 200000, \n        cost: { input: 0.015, output: 0.06 },\n        description: 'Smaller o3 variant with faster inference'\n      },\n    }\n  },\n  anthropic: {\n    baseURL: 'https://api.anthropic.com',\n    models: {\n      'claude-4-opus-20250514': { \n        contextWindow: 200000, \n        cost: { input: 0.015, output: 0.075 },\n        description: 'Most capable Claude 4 model'\n      },\n      'claude-4-sonnet-20250514': { \n        contextWindow: 200000, \n        cost: { input: 0.003, output: 0.015 },\n        description: 'Balanced Claude 4 model for most use cases'\n      },\n    }\n  },\n  google: {\n    baseURL: 'https://generativelanguage.googleapis.com/v1beta',\n    models: {\n      'gemini-2.5-pro-preview-06-05': { \n        contextWindow: 2000000, \n        cost: { input: 0.001, output: 0.002 },\n        description: 'Latest Gemini 2.5 Pro preview model'\n      },\n      'gemini-2.5-flash-preview-05-20': { \n        contextWindow: 1000000, \n        cost: { input: 0.0005, output: 0.001 },\n        description: 'Fast Gemini 2.5 Flash preview model'\n      },\n      'gemini-1.5-pro': { \n        contextWindow: 2000000, \n        cost: { input: 0.00125, output: 0.005 },\n        description: 'Gemini 1.5 Pro with large context window'\n      },\n      'gemini-1.5-flash': { \n        contextWindow: 1000000, \n        cost: { input: 0.000075, output: 0.0003 },\n        description: 'Fast and efficient Gemini 1.5 model'\n      },\n    }\n  },\n  'google-vertex': {\n    baseURL: 'https://us-central1-aiplatform.googleapis.com',\n    models: {\n      'gemini-2.5-pro-preview-06-05': { \n        contextWindow: 2000000, \n        cost: { input: 0.001, output: 0.002 },\n        description: 'Latest Gemini 2.5 Pro preview model via Vertex AI'\n      },\n      'gemini-2.5-flash-preview-05-20': { \n        contextWindow: 1000000, \n        cost: { input: 0.0005, output: 0.001 },\n        description: 'Fast Gemini 2.5 Flash preview model via Vertex AI'\n      },\n      'gemini-1.5-pro': { \n        contextWindow: 2000000, \n        cost: { input: 0.00125, output: 0.005 },\n        description: 'Gemini 1.5 Pro via Vertex AI'\n      },\n      'gemini-1.5-flash': { \n        contextWindow: 1000000, \n        cost: { input: 0.000075, output: 0.0003 },\n        description: 'Fast Gemini 1.5 model via Vertex AI'\n      },\n    }\n  },\n  perplexity: {\n    baseURL: 'https://api.perplexity.ai',\n    models: {\n      'llama-3.1-sonar-small-128k-online': { \n        contextWindow: 127072, \n        cost: { input: 0.0002, output: 0.0002 },\n        description: 'Small Llama 3.1 Sonar with online search'\n      },\n      'llama-3.1-sonar-large-128k-online': { \n        contextWindow: 127072, \n        cost: { input: 0.001, output: 0.001 },\n        description: 'Large Llama 3.1 Sonar with online search'\n      },\n      'llama-3.1-sonar-huge-128k-online': { \n        contextWindow: 127072, \n        cost: { input: 0.005, output: 0.005 },\n        description: 'Huge Llama 3.1 Sonar with online search'\n      },\n    }\n  },\n  xai: {\n    baseURL: 'https://api.x.ai/v1',\n    models: {\n      'grok-beta': { \n        contextWindow: 131072, \n        cost: { input: 0.005, output: 0.015 },\n        description: 'Grok conversational AI model'\n      },\n    }\n  },\n};\n\n// Factory functions for creating AI models\nexport function createOpenAIModel(options: {\n  model: string;\n  apiKey?: string;\n  baseURL?: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n}): AIModel {\n  return {\n    provider: 'openai',\n    model: options.model,\n    apiKey: options.apiKey || process.env.OPENAI_API_KEY,\n    baseURL: options.baseURL,\n    temperature: options.temperature ?? 0.7,\n    maxTokens: options.maxTokens,\n    topP: options.topP,\n  };\n}\n\nexport function createAnthropicModel(options: {\n  model: string;\n  apiKey?: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n}): AIModel {\n  return {\n    provider: 'anthropic',\n    model: options.model,\n    apiKey: options.apiKey || process.env.ANTHROPIC_API_KEY,\n    temperature: options.temperature ?? 0.7,\n    maxTokens: options.maxTokens ?? 1024,\n    topP: options.topP,\n  };\n}\n\nexport function createGoogleModel(options: {\n  model: string;\n  apiKey?: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n}): AIModel {\n  return {\n    provider: 'google',\n    model: options.model,\n    apiKey: options.apiKey || process.env.GOOGLE_GENERATIVE_AI_API_KEY,\n    temperature: options.temperature ?? 0.7,\n    maxTokens: options.maxTokens,\n    topP: options.topP,\n  };\n}\n\nexport function createGoogleVertexModel(options: {\n  model: string;\n  project: string;\n  location?: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n}): AIModel {\n  return {\n    provider: 'google-vertex',\n    model: options.model,\n    project: options.project,\n    location: options.location || 'us-central1',\n    temperature: options.temperature ?? 0.7,\n    maxTokens: options.maxTokens,\n    topP: options.topP,\n  };\n}\n\nexport function createPerplexityModel(options: {\n  model: string;\n  apiKey?: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n}): AIModel {\n  return {\n    provider: 'perplexity',\n    model: options.model,\n    apiKey: options.apiKey || process.env.PERPLEXITY_API_KEY,\n    temperature: options.temperature ?? 0.7,\n    maxTokens: options.maxTokens,\n    topP: options.topP,\n  };\n}\n\nexport function createXAIModel(options: {\n  model: string;\n  apiKey?: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n}): AIModel {\n  return {\n    provider: 'xai',\n    model: options.model,\n    apiKey: options.apiKey || process.env.XAI_API_KEY,\n    temperature: options.temperature ?? 0.7,\n    maxTokens: options.maxTokens,\n    topP: options.topP,\n  };\n}\n\nexport function createCustomModel(options: {\n  model: string;\n  apiKey?: string;\n  baseURL: string;\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n}): AIModel {\n  return {\n    provider: 'custom',\n    model: options.model,\n    apiKey: options.apiKey,\n    baseURL: options.baseURL,\n    temperature: options.temperature ?? 0.7,\n    maxTokens: options.maxTokens,\n    topP: options.topP,\n  };\n}\n\n// Pre-configured model instances\nexport const openAIModels = {\n  gpt4: (apiKey?: string) => createOpenAIModel({\n    model: 'gpt-4',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  gpt4Turbo: (apiKey?: string) => createOpenAIModel({\n    model: 'gpt-4-turbo',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  gpt4o: (apiKey?: string) => createOpenAIModel({\n    model: 'gpt-4o',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  gpt4oMini: (apiKey?: string) => createOpenAIModel({\n    model: 'gpt-4o-mini',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  o3: (apiKey?: string) => createOpenAIModel({\n    model: 'o3',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  o3Mini: (apiKey?: string) => createOpenAIModel({\n    model: 'o3-mini',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n};\n\nexport const anthropicModels = {\n  claude4Opus: (apiKey?: string) => createAnthropicModel({\n    model: 'claude-4-opus-20250514',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  claude4Sonnet: (apiKey?: string) => createAnthropicModel({\n    model: 'claude-4-sonnet-20250514',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n};\n\nexport const googleModels = {\n  gemini25ProPreview: (apiKey?: string) => createGoogleModel({\n    model: 'gemini-2.5-pro-preview-06-05',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  gemini25FlashPreview: (apiKey?: string) => createGoogleModel({\n    model: 'gemini-2.5-flash-preview-05-20',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  gemini15Pro: (apiKey?: string) => createGoogleModel({\n    model: 'gemini-1.5-pro',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  gemini15Flash: (apiKey?: string) => createGoogleModel({\n    model: 'gemini-1.5-flash',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n};\n\nexport const googleVertexModels = {\n  gemini25ProPreview: (project: string, location?: string) => createGoogleVertexModel({\n    model: 'gemini-2.5-pro-preview-06-05',\n    project,\n    ...(location !== undefined && { location }),\n  }),\n  gemini25FlashPreview: (project: string, location?: string) => createGoogleVertexModel({\n    model: 'gemini-2.5-flash-preview-05-20',\n    project,\n    ...(location !== undefined && { location }),\n  }),\n  gemini15Pro: (project: string, location?: string) => createGoogleVertexModel({\n    model: 'gemini-1.5-pro',\n    project,\n    ...(location !== undefined && { location }),\n  }),\n  gemini15Flash: (project: string, location?: string) => createGoogleVertexModel({\n    model: 'gemini-1.5-flash',\n    project,\n    ...(location !== undefined && { location }),\n  }),\n};\n\nexport const perplexityModels = {\n  sonar: (apiKey?: string) => createPerplexityModel({\n    model: 'llama-3.1-sonar-small-128k-online',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  sonarLarge: (apiKey?: string) => createPerplexityModel({\n    model: 'llama-3.1-sonar-large-128k-online',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n  sonarHuge: (apiKey?: string) => createPerplexityModel({\n    model: 'llama-3.1-sonar-huge-128k-online',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n};\n\nexport const xaiModels = {\n  grok: (apiKey?: string) => createXAIModel({\n    model: 'grok-beta',\n    ...(apiKey !== undefined && { apiKey }),\n  }),\n};\n\n// Legacy exports for backward compatibility\nexport const geminiModels = googleModels;\nexport const createGeminiModel = createGoogleModel;\n\n// Utility functions\nexport function getModelInfo(provider: string, model: string) {\n  const config = providerConfigs[provider as keyof typeof providerConfigs];\n  if (!config) {\n    throw new Error(`Unknown provider: ${provider}`);\n  }\n  \n  const modelInfo = config.models[model as keyof typeof config.models];\n  if (!modelInfo) {\n    throw new Error(`Unknown model: ${model} for provider: ${provider}`);\n  }\n  \n  return modelInfo;\n}\n\nexport function calculateCost(provider: string, model: string, inputTokens: number, outputTokens: number): number {\n  const modelInfo = getModelInfo(provider, model);\n  return (inputTokens * modelInfo.cost.input / 1000) + (outputTokens * modelInfo.cost.output / 1000);\n}\n\nexport function getAllModels() {\n  const allModels: Array<{ provider: string; model: string; info: any }> = [];\n  \n  Object.entries(providerConfigs).forEach(([provider, config]) => {\n    Object.entries(config.models).forEach(([model, info]) => {\n      allModels.push({ provider, model, info });\n    });\n  });\n  \n  return allModels;\n}","export { SimpleOrchestrator } from './simple';\nexport { ConversationalOrchestrator } from './conversational';\nexport { TaskOrchestrator } from './task';\nexport * from './templates';","export class OpenAgenticError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'OpenAgenticError';\n  }\n}\n\nexport class OrchestratorError extends OpenAgenticError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'OrchestratorError';\n  }\n}\n\nexport class ProviderError extends OpenAgenticError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ProviderError';\n  }\n}\n\nexport class ToolError extends OpenAgenticError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ToolError';\n  }\n}\n\nexport class BudgetExceededError extends OpenAgenticError {\n  constructor(\n    public resourceType: 'cost' | 'tokens' | 'tool_calls',\n    public currentValue: number,\n    public limit: number\n  ) {\n    super(`Budget exceeded: ${resourceType} limit of ${limit} exceeded (current: ${currentValue})`);\n    this.name = 'BudgetExceededError';\n  }\n}\n\nexport class MaxIterationsError extends OpenAgenticError {\n  constructor(maxIterations: number) {\n    super(`Maximum iterations reached: ${maxIterations}`);\n    this.name = 'MaxIterationsError';\n  }\n}\n\nexport class ValidationError extends OpenAgenticError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}","import type { AIModel, Message } from '../types';\nimport { ProviderError } from './errors';\nimport { providerConfigs } from '../providers';\n\ninterface AIResponse {\n  content?: string;\n  tool_calls?: Array<{\n    id: string;\n    type: 'function';\n    function: {\n      name: string;\n      arguments: string;\n    };\n  }>;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport class AIProvider {\n  constructor(private model: AIModel) {}\n\n  public async complete(\n    messages: Message[],\n    tools?: any[],\n    streaming = false\n  ): Promise<AIResponse> {\n    try {\n      return await this.completeRequest(messages, tools, streaming);\n    } catch (error) {\n      throw new ProviderError(\n        `Failed to complete request with ${this.model.provider}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  private async completeRequest(\n    messages: Message[],\n    tools?: any[],\n    streaming = false\n  ): Promise<AIResponse> {\n    // Check browser environment for Node.js-only providers\n    if (typeof globalThis !== 'undefined' && 'window' in globalThis) {\n      throw new ProviderError('AI providers not available in browser environment');\n    }\n\n    try {\n      // Import AI SDK functions\n      const { generateText } = await import('ai');\n      \n      // Create the appropriate provider\n      const provider = await this.createProvider();\n      \n      // Execute with the provider\n      return await this.executeWithProvider(provider, messages, tools, streaming, generateText);\n    } catch (error) {\n      throw new ProviderError(`AI SDK error: ${error}`);\n    }\n  }\n\n  private async createProvider(): Promise<any> {\n    const apiKey = this.model.apiKey || '';\n    \n    switch (this.model.provider) {\n      case 'openai': {\n        const { createOpenAI } = await import('@ai-sdk/openai');\n        return createOpenAI({\n          baseURL: this.model.baseURL,\n          apiKey,\n        });\n      }\n      \n      case 'anthropic': {\n        const { createAnthropic } = await import('@ai-sdk/anthropic');\n        return createAnthropic({ apiKey });\n      }\n      \n      case 'google': {\n        const { createGoogleGenerativeAI } = await import('@ai-sdk/google');\n        return createGoogleGenerativeAI({ apiKey });\n      }\n      \n      case 'google-vertex': {\n        const { createVertex } = await import('@ai-sdk/google-vertex');\n        return createVertex({\n          project: this.model.project || '',\n          location: this.model.location || '',\n        });\n      }\n      \n      case 'perplexity': {\n        const { createPerplexity } = await import('@ai-sdk/perplexity');\n        return createPerplexity({ apiKey });\n      }\n      \n      case 'xai': {\n        const { createXai } = await import('@ai-sdk/xai');\n        return createXai({ apiKey });\n      }\n      \n      case 'custom':\n        throw new ProviderError('Custom provider not yet implemented');\n        \n      default:\n        throw new ProviderError(`Unsupported provider: ${this.model.provider}`);\n    }\n  }\n\n  private async executeWithProvider(\n    provider: any,\n    messages: Message[],\n    tools: any[] | undefined,\n    streaming: boolean,\n    generateText: any\n  ): Promise<AIResponse> {\n    // Transform messages for AI SDK format\n    const coreMessages = this.transformMessages(messages);\n    const systemMessage = messages.find(m => m.role === 'system')?.content;\n\n    // Generate response using AI SDK\n    const result = await generateText({\n      model: provider(this.model.model),\n      messages: coreMessages,\n      system: systemMessage,\n      temperature: this.model.temperature,\n      maxTokens: this.model.maxTokens,\n      topP: this.model.topP,\n    });\n\n    return {\n      content: result.text,\n      usage: result.usage ? {\n        prompt_tokens: result.usage.promptTokens,\n        completion_tokens: result.usage.completionTokens,\n        total_tokens: result.usage.totalTokens,\n      } : {\n        prompt_tokens: 0,\n        completion_tokens: 0,\n        total_tokens: 0,\n      },\n    };\n  }\n\n  private transformMessages(messages: Message[]): any[] {\n    return messages\n      .filter(m => m.role !== 'system')\n      .map(m => {\n        if (m.role === 'user') {\n          return { role: 'user' as const, content: m.content };\n        } else if (m.role === 'assistant') {\n          return { role: 'assistant' as const, content: m.content };\n        } else if (m.role === 'tool') {\n          return { \n            role: 'tool' as const, \n            content: [{ \n              type: 'tool-result' as const, \n              toolCallId: m.toolCallId || '', \n              toolName: 'unknown',\n              result: m.content \n            }] \n          };\n        }\n        return { role: 'user' as const, content: m.content };\n      });\n  }\n\n  // Calculate cost based on token usage\n  public calculateCost(inputTokens: number, outputTokens: number): number {\n    try {\n      const { calculateCost } = require('../providers');\n      return calculateCost(\n        this.model.provider,\n        this.model.model,\n        inputTokens,\n        outputTokens\n      );\n    } catch (error) {\n      // Fall back to approximation if specific pricing not available\n      const avgInputCost = 0.01 / 1000; // Average input cost per token\n      const avgOutputCost = 0.02 / 1000; // Average output cost per token\n      return (inputTokens * avgInputCost) + (outputTokens * avgOutputCost);\n    }\n  }\n\n  // Get model metadata if available\n  public getModelInfo(): any {\n    try {\n      const { getModelInfo } = require('../providers');\n      return getModelInfo(this.model.provider, this.model.model);\n    } catch (error) {\n      return null;\n    }\n  }\n}","import type { CostTracking } from '../types';\nimport { AIProvider } from './ai-provider';\n\nexport class CostTracker {\n  private tracking: CostTracking = {\n    inputTokens: 0,\n    outputTokens: 0,\n    toolCalls: 0,\n    estimatedCost: 0,\n  };\n\n  private budget: {\n    maxCost?: number;\n    maxTokens?: number;\n    maxToolCalls?: number;\n  } | undefined;\n\n  // Optional AIProvider for more accurate cost calculations\n  private aiProvider?: AIProvider;\n\n  constructor(\n    budget?: { maxCost?: number; maxTokens?: number; maxToolCalls?: number },\n    aiProvider?: AIProvider\n  ) {\n    this.budget = budget;\n    this.aiProvider = aiProvider;\n  }\n\n  public updateTokenUsage(inputTokens: number, outputTokens: number): void {\n    this.tracking.inputTokens += inputTokens;\n    this.tracking.outputTokens += outputTokens;\n    this.updateEstimatedCost();\n  }\n\n  public incrementToolCalls(cost = 0): void {\n    this.tracking.toolCalls += 1;\n    this.tracking.estimatedCost += cost;\n  }\n\n  public getTracking(): CostTracking {\n    return { ...this.tracking };\n  }\n\n  public checkBudget(): {\n    withinBudget: boolean;\n    violations: string[];\n  } {\n    const violations: string[] = [];\n\n    if (this.budget?.maxCost && this.tracking.estimatedCost >= this.budget.maxCost) {\n      violations.push(`Cost limit exceeded: $${this.tracking.estimatedCost.toFixed(4)} >= $${this.budget.maxCost}`);\n    }\n\n    if (this.budget?.maxTokens && (this.tracking.inputTokens + this.tracking.outputTokens) >= this.budget.maxTokens) {\n      violations.push(`Token limit exceeded: ${this.tracking.inputTokens + this.tracking.outputTokens} >= ${this.budget.maxTokens}`);\n    }\n\n    if (this.budget?.maxToolCalls && this.tracking.toolCalls >= this.budget.maxToolCalls) {\n      violations.push(`Tool call limit exceeded: ${this.tracking.toolCalls} >= ${this.budget.maxToolCalls}`);\n    }\n\n    return {\n      withinBudget: violations.length === 0,\n      violations,\n    };\n  }\n\n  public reset(): void {\n    this.tracking = {\n      inputTokens: 0,\n      outputTokens: 0,\n      toolCalls: 0,\n      estimatedCost: 0,\n    };\n  }\n\n  private updateEstimatedCost(): void {\n    if (this.aiProvider) {\n      // Use the AIProvider to calculate costs if available\n      this.tracking.estimatedCost = this.aiProvider.calculateCost(\n        this.tracking.inputTokens,\n        this.tracking.outputTokens\n      );\n    } else {\n      // Fallback to simplified calculation\n      const avgInputCost = 0.01 / 1000; // Average input cost per token\n      const avgOutputCost = 0.02 / 1000; // Average output cost per token\n\n      this.tracking.estimatedCost = \n        (this.tracking.inputTokens * avgInputCost) +\n        (this.tracking.outputTokens * avgOutputCost);\n    }\n  }\n\n  // Allow updating the AIProvider\n  public setAIProvider(provider: AIProvider): void {\n    this.aiProvider = provider;\n  }\n}","import type { Tool } from '../types';\nimport { ToolError } from './errors';\n\nexport class ToolRegistry {\n  private tools = new Map<string, Tool>();\n  private usedTools = new Set<string>();\n\n  constructor(tools: Tool[] = []) {\n    tools.forEach(tool => this.register(tool));\n  }\n\n  register(tool: Tool): void {\n    if (this.tools.has(tool.name)) {\n      throw new ToolError(`Tool '${tool.name}' is already registered`);\n    }\n    this.tools.set(tool.name, tool);\n  }\n\n  unregister(name: string): boolean {\n    return this.tools.delete(name);\n  }\n\n  async execute(name: string, args: any): Promise<any> {\n    const tool = this.tools.get(name);\n    if (!tool) {\n      throw new ToolError(`Tool '${name}' not found`);\n    }\n\n    try {\n      // Mark tool as used for tracking\n      this.usedTools.add(name);\n      \n      // Execute the tool\n      return await tool.execute(args);\n    } catch (error) {\n      throw new ToolError(\n        `Failed to execute tool '${name}': ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  getDefinitions(): any[] {\n    return Array.from(this.tools.values()).map(tool => ({\n      type: 'function',\n      function: {\n        name: tool.name,\n        description: tool.description,\n        parameters: tool.parameters\n      }\n    }));\n  }\n\n  getUsedTools(): string[] {\n    return Array.from(this.usedTools);\n  }\n\n  getTool(name: string): Tool | undefined {\n    return this.tools.get(name);\n  }\n\n  getAllTools(): Tool[] {\n    return Array.from(this.tools.values());\n  }\n\n  reset(): void {\n    this.usedTools.clear();\n  }\n}","/**\n * Simplified event emitter using observer pattern\n * Replaces the complex Node.js EventEmitter with a lightweight implementation\n */\nexport class SimpleEventEmitter<T> {\n  private listeners: Array<(event: T) => void> = [];\n  \n  /**\n   * Add an event listener\n   */\n  on(listener: (event: T) => void): void {\n    this.listeners.push(listener);\n  }\n  \n  /**\n   * Remove an event listener\n   */\n  off(listener: (event: T) => void): void {\n    const index = this.listeners.indexOf(listener);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n  \n  /**\n   * Emit an event to all listeners\n   */\n  emit(event: T): void {\n    // Use a copy of the listeners array to avoid issues if listeners are modified during emission\n    const currentListeners = [...this.listeners];\n    currentListeners.forEach(listener => {\n      try {\n        listener(event);\n      } catch (error) {\n        // Silently ignore listener errors to prevent one bad listener from breaking others\n        console.warn('Event listener error:', error);\n      }\n    });\n  }\n  \n  /**\n   * Remove all listeners\n   */\n  clear(): void {\n    this.listeners = [];\n  }\n  \n  /**\n   * Get the number of active listeners\n   */\n  listenerCount(): number {\n    return this.listeners.length;\n  }\n}\n\n/**\n * Create a typed event emitter for orchestrator events\n */\nexport function createOrchestratorEventEmitter() {\n  return new SimpleEventEmitter<any>();\n}","import type {\n  OrchestratorConfig,\n  ExecutionResult,\n  Message,\n  Tool,\n  OrchestratorEvent,\n  EventHandler,\n  CostTracking,\n} from '../types';\nimport { AIProvider } from './ai-provider';\nimport { CostTracker } from './cost-tracker';\nimport { ToolRegistry } from './tool-registry';\nimport { OrchestratorError, BudgetExceededError, MaxIterationsError } from './errors';\nimport { SimpleEventEmitter } from '../utils/simple-event-emitter';\n\nexport class Orchestrator {\n  private messages: Message[] = [];\n  private iterations: number = 0;\n  private eventEmitter = new SimpleEventEmitter<OrchestratorEvent>();\n\n  constructor(\n    private config: OrchestratorConfig,\n    private aiProvider: AIProvider = new AIProvider(config.model),\n    private costTracker: CostTracker = new CostTracker(config.budget),\n    private toolRegistry: ToolRegistry = new ToolRegistry(config.tools)\n  ) {\n    if (config.systemPrompt) {\n      this.messages.push({\n        role: 'system',\n        content: config.systemPrompt,\n      });\n    }\n  }\n\n  public async execute(userMessage: string): Promise<ExecutionResult> {\n    this.eventEmitter.emit({ type: 'start', data: { config: this.config } });\n    \n    try {\n      this.messages.push({\n        role: 'user',\n        content: userMessage,\n      });\n\n      while (this.iterations < this.config.maxIterations) {\n        this.iterations++;\n        \n        // Check budget constraints\n        this.checkBudgetConstraints();\n\n        // Get AI response\n        const response = await this.aiProvider.complete(\n          this.messages,\n          this.toolRegistry.getDefinitions(), // Updated to match new method name\n          this.config.streaming\n        );\n\n        // Update cost tracking\n        this.costTracker.updateTokenUsage(\n          response.usage?.prompt_tokens || 0,\n          response.usage?.completion_tokens || 0\n        );\n\n        const assistantMessage: Message = {\n          role: 'assistant',\n          content: response.content || '',\n          toolCalls: response.tool_calls,\n        };\n\n        this.messages.push(assistantMessage);\n        this.eventEmitter.emit({ type: 'iteration', data: { iteration: this.iterations, message: assistantMessage } });\n\n        // Handle tool calls if any\n        if (response.tool_calls && response.tool_calls.length > 0) {\n          for (const toolCall of response.tool_calls) {\n            await this.executeToolCall(toolCall);\n          }\n          continue; // Continue the conversation loop\n        }\n\n        // If no tool calls, we're done\n        break;\n      }\n\n      if (this.iterations >= this.config.maxIterations) {\n        throw new MaxIterationsError(this.config.maxIterations);\n      }\n\n      const result: ExecutionResult = {\n        success: true,\n        result: this.messages[this.messages.length - 1]?.content,\n        messages: this.messages,\n        costTracking: this.costTracker.getTracking(),\n        iterations: this.iterations,\n        toolCallsUsed: this.toolRegistry.getUsedTools(),\n      };\n\n      this.eventEmitter.emit({ type: 'complete', data: result });\n      return result;\n\n    } catch (error) {\n      const errorResult: ExecutionResult = {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        messages: this.messages,\n        costTracking: this.costTracker.getTracking(),\n        iterations: this.iterations,\n        toolCallsUsed: this.toolRegistry.getUsedTools(),\n      };\n\n      this.eventEmitter.emit({ type: 'error', data: { error: errorResult.error!, iteration: this.iterations } });\n      return errorResult;\n    }\n  }\n\n  public onEvent(handler: EventHandler): void {\n    this.eventEmitter.on(handler);\n  }\n\n  public offEvent(handler: EventHandler): void {\n    this.eventEmitter.off(handler);\n  }\n\n  private async executeToolCall(toolCall: any): Promise<void> {\n    try {\n      this.eventEmitter.emit({\n        type: 'tool_call',\n        data: {\n          toolName: toolCall.function.name,\n          arguments: JSON.parse(toolCall.function.arguments),\n        }\n      });\n\n      const result = await this.toolRegistry.execute( // Updated to match new method name\n        toolCall.function.name,\n        JSON.parse(toolCall.function.arguments)\n      );\n\n      this.costTracker.incrementToolCalls();\n\n      this.eventEmitter.emit({\n        type: 'tool_result',\n        data: {\n          toolName: toolCall.function.name,\n          result,\n          success: true,\n        }\n      });\n\n      // Add tool result to messages\n      this.messages.push({\n        role: 'tool',\n        content: JSON.stringify(result),\n        toolCallId: toolCall.id,\n      });\n\n    } catch (error) {\n      this.eventEmitter.emit({\n        type: 'tool_result',\n        data: {\n          toolName: toolCall.function.name,\n          result: error,\n          success: false,\n        }\n      });\n\n      // Add error result to messages\n      this.messages.push({\n        role: 'tool',\n        content: `Error: ${error instanceof Error ? error.message : String(error)}`,\n        toolCallId: toolCall.id,\n      });\n    }\n  }\n\n  private checkBudgetConstraints(): void {\n    const tracking = this.costTracker.getTracking();\n    const budget = this.config.budget;\n\n    if (!budget) return;\n\n    if (budget.maxCost && tracking.estimatedCost >= budget.maxCost) {\n      throw new BudgetExceededError('cost', tracking.estimatedCost, budget.maxCost);\n    }\n\n    if (budget.maxTokens && (tracking.inputTokens + tracking.outputTokens) >= budget.maxTokens) {\n      throw new BudgetExceededError('tokens', tracking.inputTokens + tracking.outputTokens, budget.maxTokens);\n    }\n\n    if (budget.maxToolCalls && tracking.toolCalls >= budget.maxToolCalls) {\n      throw new BudgetExceededError('tool_calls', tracking.toolCalls, budget.maxToolCalls);\n    }\n  }\n\n  public getCostTracking(): CostTracking {\n    return this.costTracker.getTracking();\n  }\n\n  public getMessages(): Message[] {\n    return [...this.messages];\n  }\n\n  public reset(): void {\n    this.messages = this.config.systemPrompt \n      ? [{ role: 'system', content: this.config.systemPrompt }]\n      : [];\n    this.iterations = 0;\n    this.costTracker.reset();\n    this.toolRegistry.reset();\n    this.eventEmitter.clear(); // Clear event listeners on reset\n  }\n\n  public getEventListenerCount(): number {\n    return this.eventEmitter.listenerCount();\n  }\n}","import { Orchestrator } from '../core/orchestrator';\nimport { AIProvider } from '../core/ai-provider';\nimport { CostTracker } from '../core/cost-tracker';\nimport { ToolRegistry } from '../core/tool-registry';\nimport type { AIModel, Tool, OrchestratorConfig } from '../types';\n\nexport class SimpleOrchestrator extends Orchestrator {\n  constructor(\n    model: AIModel, \n    tools: Tool[] = [], \n    systemPrompt?: string,\n    aiProvider?: AIProvider,\n    costTracker?: CostTracker,\n    toolRegistry?: ToolRegistry\n  ) {\n    const config: OrchestratorConfig = {\n      model,\n      tools,\n      systemPrompt,\n      maxIterations: 5,\n      streaming: false,\n      debug: false,\n    };\n    \n    super(\n      config,\n      aiProvider || new AIProvider(model),\n      costTracker || new CostTracker(),\n      toolRegistry || new ToolRegistry(tools)\n    );\n  }\n\n  public static create(options: {\n    provider: 'openai' | 'anthropic' | 'google' | 'google-vertex' | 'perplexity' | 'xai';\n    model: string;\n    apiKey?: string;\n    baseURL?: string;\n    project?: string;\n    location?: string;\n    tools?: Tool[];\n    systemPrompt?: string;\n  }): SimpleOrchestrator {\n    const model: AIModel = {\n      provider: options.provider,\n      model: options.model,\n      temperature: 0.7,\n      apiKey: options.apiKey,\n      baseURL: options.baseURL,\n      project: options.project,\n      location: options.location,\n    };\n\n    return new SimpleOrchestrator(\n      model,\n      options.tools || [],\n      options.systemPrompt\n    );\n  }\n}","import { Orchestrator } from '../core/orchestrator';\nimport { AIProvider } from '../core/ai-provider';\nimport { CostTracker } from '../core/cost-tracker';\nimport { ToolRegistry } from '../core/tool-registry';\nimport type { AIModel, Tool, OrchestratorConfig, Message } from '../types';\n\nexport class ConversationalOrchestrator extends Orchestrator {\n  private conversationHistory: Message[] = [];\n\n  constructor(\n    model: AIModel, \n    tools: Tool[] = [], \n    systemPrompt?: string,\n    aiProvider?: AIProvider,\n    costTracker?: CostTracker,\n    toolRegistry?: ToolRegistry\n  ) {\n    const config: OrchestratorConfig = {\n      model,\n      tools,\n      systemPrompt: systemPrompt || 'You are a helpful assistant that can use tools to help users. Maintain context from previous messages in this conversation.',\n      maxIterations: 10,\n      streaming: false,\n      debug: false,\n    };\n    \n    super(\n      config,\n      aiProvider || new AIProvider(model),\n      costTracker || new CostTracker(),\n      toolRegistry || new ToolRegistry(tools)\n    );\n  }\n\n  public async continueConversation(userMessage: string): Promise<any> {\n    // Add user message to conversation history\n    this.conversationHistory.push({\n      role: 'user',\n      content: userMessage,\n    });\n\n    // Execute with current conversation context\n    const result = await this.execute(userMessage);\n\n    // Add assistant response to conversation history\n    if (result.success && result.result) {\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: result.result,\n      });\n    }\n\n    return result;\n  }\n\n  public getConversationHistory(): Message[] {\n    return [...this.conversationHistory];\n  }\n\n  public clearConversation(): void {\n    this.conversationHistory = [];\n    this.reset();\n  }\n\n  public static create(options: {\n    provider: 'openai' | 'anthropic' | 'google' | 'google-vertex' | 'perplexity' | 'xai';\n    model: string;\n    apiKey?: string;\n    baseURL?: string;\n    project?: string;\n    location?: string;\n    tools?: Tool[];\n    systemPrompt?: string;\n  }): ConversationalOrchestrator {\n    const model: AIModel = {\n      provider: options.provider,\n      model: options.model,\n      temperature: 0.7,\n      apiKey: options.apiKey,\n      baseURL: options.baseURL,\n      project: options.project,\n      location: options.location,\n    };\n\n    return new ConversationalOrchestrator(\n      model,\n      options.tools || [],\n      options.systemPrompt\n    );\n  }\n}","import { Orchestrator } from '../core/orchestrator';\nimport { AIProvider } from '../core/ai-provider';\nimport { CostTracker } from '../core/cost-tracker';\nimport { ToolRegistry } from '../core/tool-registry';\nimport type { AIModel, Tool, OrchestratorConfig } from '../types';\n\nexport interface TaskStep {\n  name: string;\n  description: string;\n  tools?: string[];\n  maxIterations?: number;\n}\n\nexport class TaskOrchestrator extends Orchestrator {\n  private steps: TaskStep[];\n  private currentStep = 0;\n  private stepResults: any[] = [];\n\n  constructor(\n    model: AIModel,\n    tools: Tool[] = [],\n    steps: TaskStep[] = [],\n    systemPrompt?: string,\n    aiProvider?: AIProvider,\n    costTracker?: CostTracker,\n    toolRegistry?: ToolRegistry\n  ) {\n    const config: OrchestratorConfig = {\n      model,\n      tools,\n      systemPrompt: systemPrompt || 'You are a task-oriented assistant. Complete each task step systematically.',\n      maxIterations: 15,\n      streaming: false,\n      debug: false,\n    };\n    \n    super(\n      config,\n      aiProvider || new AIProvider(model),\n      costTracker || new CostTracker(),\n      toolRegistry || new ToolRegistry(tools)\n    );\n    \n    this.steps = steps;\n  }\n\n  public async executeTask(taskDescription: string): Promise<any> {\n    const fullPrompt = this.buildTaskPrompt(taskDescription);\n    const result = await this.execute(fullPrompt);\n    \n    if (result.success) {\n      this.stepResults.push(result.result);\n    }\n    \n    return {\n      ...result,\n      currentStep: this.currentStep,\n      totalSteps: this.steps.length,\n      stepResults: [...this.stepResults],\n    };\n  }\n\n  public async executeNextStep(): Promise<any> {\n    if (this.currentStep >= this.steps.length) {\n      return {\n        success: false,\n        error: 'All steps completed',\n        currentStep: this.currentStep,\n        totalSteps: this.steps.length,\n        stepResults: [...this.stepResults],\n      };\n    }\n\n    const step = this.steps[this.currentStep];\n    if (!step) {\n      return {\n        success: false,\n        error: 'Step not found',\n        currentStep: this.currentStep,\n        totalSteps: this.steps.length,\n        stepResults: [...this.stepResults],\n      };\n    }\n\n    const stepPrompt = this.buildStepPrompt(step);\n    \n    const result = await this.execute(stepPrompt);\n    \n    if (result.success) {\n      this.stepResults.push(result.result);\n      this.currentStep++;\n    }\n    \n    return {\n      ...result,\n      currentStep: this.currentStep,\n      totalSteps: this.steps.length,\n      stepResults: [...this.stepResults],\n      completedStep: step,\n    };\n  }\n\n  public getProgress(): {\n    currentStep: number;\n    totalSteps: number;\n    completed: boolean;\n    stepResults: any[];\n  } {\n    return {\n      currentStep: this.currentStep,\n      totalSteps: this.steps.length,\n      completed: this.currentStep >= this.steps.length,\n      stepResults: [...this.stepResults],\n    };\n  }\n\n  private buildTaskPrompt(taskDescription: string): string {\n    let prompt = `Task: ${taskDescription}\\n\\n`;\n    \n    if (this.steps.length > 0) {\n      prompt += 'Please complete this task following these steps:\\n';\n      this.steps.forEach((step, index) => {\n        prompt += `${index + 1}. ${step.name}: ${step.description}\\n`;\n      });\n      prompt += '\\n';\n    }\n    \n    if (this.stepResults.length > 0) {\n      prompt += 'Previous step results:\\n';\n      this.stepResults.forEach((result, index) => {\n        prompt += `Step ${index + 1}: ${result}\\n`;\n      });\n      prompt += '\\n';\n    }\n    \n    return prompt;\n  }\n\n  private buildStepPrompt(step: TaskStep): string {\n    let prompt = `Current Step: ${step.name}\\n`;\n    prompt += `Description: ${step.description}\\n\\n`;\n    \n    if (step.tools && step.tools.length > 0) {\n      prompt += `Recommended tools for this step: ${step.tools.join(', ')}\\n\\n`;\n    }\n    \n    if (this.stepResults.length > 0) {\n      prompt += 'Previous step results for context:\\n';\n      this.stepResults.forEach((result, index) => {\n        prompt += `Step ${index + 1}: ${result}\\n`;\n      });\n      prompt += '\\n';\n    }\n    \n    prompt += 'Please complete this step.';\n    \n    return prompt;\n  }\n\n  public static create(options: {\n    provider: 'openai' | 'anthropic' | 'google' | 'google-vertex' | 'perplexity' | 'xai';\n    model: string;\n    apiKey?: string;\n    baseURL?: string;\n    project?: string;\n    location?: string;\n    tools?: Tool[];\n    steps?: TaskStep[];\n    systemPrompt?: string;\n  }): TaskOrchestrator {\n    const model: AIModel = {\n      provider: options.provider,\n      model: options.model,\n      temperature: 0.7,\n      apiKey: options.apiKey,\n      baseURL: options.baseURL,\n      project: options.project,\n      location: options.location,\n    };\n\n    return new TaskOrchestrator(\n      model,\n      options.tools || [],\n      options.steps || [],\n      options.systemPrompt\n    );\n  }\n}","import type { Tool } from '../types';\n\nexport const httpRequestTool: Tool = {\n  name: 'http_request',\n  description: 'Make HTTP requests to external APIs',\n  parameters: {\n    url: {\n      type: 'string',\n      description: 'The URL to make the request to',\n      required: true,\n    },\n    method: {\n      type: 'string',\n      description: 'HTTP method (GET, POST, PUT, DELETE, etc.)',\n      required: false,\n      enum: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'],\n    },\n    headers: {\n      type: 'object',\n      description: 'HTTP headers to include in the request',\n      required: false,\n    },\n    body: {\n      type: 'string',\n      description: 'Request body (for POST, PUT, PATCH requests)',\n      required: false,\n    },\n  },\n  execute: async (params: any) => {\n    const { url, method = 'GET', headers = {}, body } = params;\n    \n    const requestInit: RequestInit = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n    };\n\n    if (body) {\n      requestInit.body = JSON.stringify(body);\n    }\n\n    const response = await fetch(url, requestInit);\n\n    const data = await response.text();\n    \n    return {\n      status: response.status,\n      statusText: response.statusText,\n      headers: Object.fromEntries(response.headers.entries()),\n      data: (() => {\n        try {\n          return JSON.parse(data);\n        } catch {\n          return data;\n        }\n      })(),\n    };\n  },\n  costEstimate: 0.001,\n};\n\nexport const calculatorTool: Tool = {\n  name: 'calculator',\n  description: 'Perform mathematical calculations',\n  parameters: {\n    expression: {\n      type: 'string',\n      description: 'Mathematical expression to evaluate (e.g., \"2 + 2\", \"Math.sqrt(16)\")',\n      required: true,\n    },\n  },\n  execute: async (params: any) => {\n    const { expression } = params;\n    \n    // Basic safety check - only allow safe mathematical operations\n    const safeExpression = expression.replace(/[^0-9+\\-*/.()Math.sqrtpowabsfloorceilminmax ]/g, '');\n    \n    try {\n      // Using Function constructor for safe evaluation\n      const result = new Function('Math', `return ${safeExpression}`)(Math);\n      return { result, expression: safeExpression };\n    } catch (error) {\n      throw new Error(`Invalid mathematical expression: ${expression}`);\n    }\n  },\n  costEstimate: 0,\n};\n\nexport const timestampTool: Tool = {\n  name: 'timestamp',\n  description: 'Get current timestamp and date information',\n  parameters: {\n    format: {\n      type: 'string',\n      description: 'Format for the timestamp (iso, unix, human)',\n      required: false,\n      enum: ['iso', 'unix', 'human'],\n    },\n    timezone: {\n      type: 'string',\n      description: 'Timezone for the timestamp (e.g., \"UTC\", \"America/New_York\")',\n      required: false,\n    },\n  },\n  execute: async (params: any) => {\n    const { format = 'iso', timezone } = params;\n    const now = new Date();\n    \n    switch (format) {\n      case 'unix':\n        return { timestamp: Math.floor(now.getTime() / 1000), format: 'unix' };\n      case 'human':\n        return { \n          timestamp: timezone \n            ? now.toLocaleString('en-US', { timeZone: timezone })\n            : now.toLocaleString(),\n          format: 'human',\n          timezone: timezone || 'local'\n        };\n      default: // iso\n        return { \n          timestamp: timezone \n            ? new Date(now.toLocaleString('en-US', { timeZone: timezone })).toISOString()\n            : now.toISOString(),\n          format: 'iso',\n          timezone: timezone || 'UTC'\n        };\n    }\n  },\n  costEstimate: 0,\n};\n\nexport const builtInTools: Tool[] = [\n  httpRequestTool,\n  calculatorTool,\n  timestampTool,\n];","import type { AIModel, Tool } from '../types';\nimport { SimpleOrchestrator } from './simple';\nimport { ConversationalOrchestrator } from './conversational';\nimport { TaskOrchestrator, type TaskStep } from './task';\nimport { builtInTools } from '../tools/built-in';\n\nexport function createResearchAssistant(model: AIModel): SimpleOrchestrator {\n  const tools = [\n    builtInTools.find(t => t.name === 'http_request')!,\n    builtInTools.find(t => t.name === 'calculator')!,\n  ];\n\n  return new SimpleOrchestrator(\n    model,\n    tools,\n    'You are a research assistant. Help users gather information, analyze data, and provide comprehensive reports. Use web requests to gather current information when needed.'\n  );\n}\n\nexport function createDataAnalyst(model: AIModel): SimpleOrchestrator {\n  const tools = [\n    builtInTools.find(t => t.name === 'calculator')!,\n    builtInTools.find(t => t.name === 'timestamp')!,\n  ];\n\n  return new SimpleOrchestrator(\n    model,\n    tools,\n    'You are a data analyst. Help users analyze data, perform calculations, and create insights. Be precise with numbers and show your work.'\n  );\n}\n\nexport function createAPIIntegrator(model: AIModel): SimpleOrchestrator {\n  const tools = [\n    builtInTools.find(t => t.name === 'http_request')!,\n  ];\n\n  return new SimpleOrchestrator(\n    model,\n    tools,\n    'You are an API integration specialist. Help users connect to external services, test APIs, and integrate data from various sources.'\n  );\n}\n\nexport function createCustomerService(model: AIModel): ConversationalOrchestrator {\n  return new ConversationalOrchestrator(\n    model,\n    [],\n    'You are a helpful customer service assistant. Maintain a friendly, professional tone and help users with their questions and concerns.'\n  );\n}\n\nexport function createContentCreator(model: AIModel): TaskOrchestrator {\n  const steps: TaskStep[] = [\n    {\n      name: 'Research',\n      description: 'Research the topic and gather relevant information',\n      tools: ['http_request'],\n    },\n    {\n      name: 'Outline',\n      description: 'Create a detailed outline for the content',\n    },\n    {\n      name: 'Draft',\n      description: 'Write the first draft of the content',\n    },\n    {\n      name: 'Review',\n      description: 'Review and refine the content for quality and accuracy',\n    },\n  ];\n\n  return new TaskOrchestrator(\n    model,\n    builtInTools,\n    steps,\n    'You are a content creator. Create high-quality, engaging content following a systematic approach.'\n  );\n}\n\nexport function createProjectManager(model: AIModel): TaskOrchestrator {\n  const steps: TaskStep[] = [\n    {\n      name: 'Requirements',\n      description: 'Gather and analyze project requirements',\n    },\n    {\n      name: 'Planning',\n      description: 'Create a detailed project plan with milestones',\n    },\n    {\n      name: 'Resource Allocation',\n      description: 'Identify and allocate necessary resources',\n    },\n    {\n      name: 'Timeline',\n      description: 'Create a realistic timeline with dependencies',\n      tools: ['timestamp'],\n    },\n    {\n      name: 'Risk Assessment',\n      description: 'Identify potential risks and mitigation strategies',\n    },\n  ];\n\n  return new TaskOrchestrator(\n    model,\n    builtInTools,\n    steps,\n    'You are a project manager. Help users plan, organize, and manage projects effectively.'\n  );\n}"],"mappings":"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","names":["calculateCost","getModelInfo"]}