{"version":3,"sources":["../../src/core/index.ts","../../src/core/orchestrator.ts","../../src/core/errors.ts","../../src/core/ai-provider.ts","../../src/core/cost-tracker.ts","../../src/core/tool-registry.ts"],"sourcesContent":["export { Orchestrator } from './orchestrator';\nexport { AIProvider } from './ai-provider';\nexport { CostTracker } from './cost-tracker';\nexport { ToolRegistry } from './tool-registry';\nexport * from './errors';","import { EventEmitter } from 'events';\nimport type {\n  OrchestratorConfig,\n  ExecutionResult,\n  Message,\n  Tool,\n  OrchestratorEvent,\n  EventHandler,\n  CostTracking,\n} from '../types';\nimport { AIProvider } from './ai-provider';\nimport { CostTracker } from './cost-tracker';\nimport { ToolRegistry } from './tool-registry';\nimport { OrchestratorError, BudgetExceededError, MaxIterationsError } from './errors';\n\nexport class Orchestrator extends EventEmitter {\n  private config: OrchestratorConfig;\n  private aiProvider: AIProvider;\n  private costTracker: CostTracker;\n  private toolRegistry: ToolRegistry;\n  private messages: Message[] = [];\n  private iterations: number = 0;\n\n  constructor(config: OrchestratorConfig) {\n    super();\n    this.config = config;\n    this.aiProvider = new AIProvider(config.model);\n    this.costTracker = new CostTracker(config.budget);\n    this.toolRegistry = new ToolRegistry(config.tools);\n\n    if (config.systemPrompt) {\n      this.messages.push({\n        role: 'system',\n        content: config.systemPrompt,\n      });\n    }\n  }\n\n  public async execute(userMessage: string): Promise<ExecutionResult> {\n    this.emit('start', { config: this.config });\n    \n    try {\n      this.messages.push({\n        role: 'user',\n        content: userMessage,\n      });\n\n      while (this.iterations < this.config.maxIterations) {\n        this.iterations++;\n        \n        // Check budget constraints\n        this.checkBudgetConstraints();\n\n        // Get AI response\n        const response = await this.aiProvider.complete(\n          this.messages,\n          this.toolRegistry.getToolDefinitions(),\n          this.config.streaming\n        );\n\n        // Update cost tracking\n        this.costTracker.updateTokenUsage(\n          response.usage?.prompt_tokens || 0,\n          response.usage?.completion_tokens || 0\n        );\n\n        const assistantMessage: Message = {\n          role: 'assistant',\n          content: response.content || '',\n          toolCalls: response.tool_calls,\n        };\n\n        this.messages.push(assistantMessage);\n        this.emit('iteration', { iteration: this.iterations, message: assistantMessage });\n\n        // Handle tool calls if any\n        if (response.tool_calls && response.tool_calls.length > 0) {\n          for (const toolCall of response.tool_calls) {\n            await this.executeToolCall(toolCall);\n          }\n          continue; // Continue the conversation loop\n        }\n\n        // If no tool calls, we're done\n        break;\n      }\n\n      if (this.iterations >= this.config.maxIterations) {\n        throw new MaxIterationsError(this.config.maxIterations);\n      }\n\n      const result: ExecutionResult = {\n        success: true,\n        result: this.messages[this.messages.length - 1]?.content,\n        messages: this.messages,\n        costTracking: this.costTracker.getTracking(),\n        iterations: this.iterations,\n        toolCallsUsed: this.toolRegistry.getUsedTools(),\n      };\n\n      this.emit('complete', result);\n      return result;\n\n    } catch (error) {\n      const errorResult: ExecutionResult = {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        messages: this.messages,\n        costTracking: this.costTracker.getTracking(),\n        iterations: this.iterations,\n        toolCallsUsed: this.toolRegistry.getUsedTools(),\n      };\n\n      this.emit('error', { error: errorResult.error!, iteration: this.iterations });\n      return errorResult;\n    }\n  }\n\n  public onEvent(handler: EventHandler): void {\n    this.on('start', (data) => handler({ type: 'start', data }));\n    this.on('iteration', (data) => handler({ type: 'iteration', data }));\n    this.on('tool_call', (data) => handler({ type: 'tool_call', data }));\n    this.on('tool_result', (data) => handler({ type: 'tool_result', data }));\n    this.on('cost_update', (data) => handler({ type: 'cost_update', data }));\n    this.on('complete', (data) => handler({ type: 'complete', data }));\n    this.on('error', (data) => handler({ type: 'error', data }));\n  }\n\n  private async executeToolCall(toolCall: any): Promise<void> {\n    try {\n      this.emit('tool_call', {\n        toolName: toolCall.function.name,\n        arguments: JSON.parse(toolCall.function.arguments),\n      });\n\n      const result = await this.toolRegistry.executeTool(\n        toolCall.function.name,\n        JSON.parse(toolCall.function.arguments)\n      );\n\n      this.costTracker.incrementToolCalls();\n\n      this.emit('tool_result', {\n        toolName: toolCall.function.name,\n        result,\n        success: true,\n      });\n\n      // Add tool result to messages\n      this.messages.push({\n        role: 'tool',\n        content: JSON.stringify(result),\n        toolCallId: toolCall.id,\n      });\n\n    } catch (error) {\n      this.emit('tool_result', {\n        toolName: toolCall.function.name,\n        result: error,\n        success: false,\n      });\n\n      // Add error result to messages\n      this.messages.push({\n        role: 'tool',\n        content: `Error: ${error instanceof Error ? error.message : String(error)}`,\n        toolCallId: toolCall.id,\n      });\n    }\n  }\n\n  private checkBudgetConstraints(): void {\n    const tracking = this.costTracker.getTracking();\n    const budget = this.config.budget;\n\n    if (!budget) return;\n\n    if (budget.maxCost && tracking.estimatedCost >= budget.maxCost) {\n      throw new BudgetExceededError('cost', tracking.estimatedCost, budget.maxCost);\n    }\n\n    if (budget.maxTokens && (tracking.inputTokens + tracking.outputTokens) >= budget.maxTokens) {\n      throw new BudgetExceededError('tokens', tracking.inputTokens + tracking.outputTokens, budget.maxTokens);\n    }\n\n    if (budget.maxToolCalls && tracking.toolCalls >= budget.maxToolCalls) {\n      throw new BudgetExceededError('tool_calls', tracking.toolCalls, budget.maxToolCalls);\n    }\n  }\n\n  public getCostTracking(): CostTracking {\n    return this.costTracker.getTracking();\n  }\n\n  public getMessages(): Message[] {\n    return [...this.messages];\n  }\n\n  public reset(): void {\n    this.messages = this.config.systemPrompt \n      ? [{ role: 'system', content: this.config.systemPrompt }]\n      : [];\n    this.iterations = 0;\n    this.costTracker.reset();\n    this.toolRegistry.reset();\n  }\n}","export class OpenAgenticError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'OpenAgenticError';\n  }\n}\n\nexport class OrchestratorError extends OpenAgenticError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'OrchestratorError';\n  }\n}\n\nexport class ProviderError extends OpenAgenticError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ProviderError';\n  }\n}\n\nexport class ToolError extends OpenAgenticError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ToolError';\n  }\n}\n\nexport class BudgetExceededError extends OpenAgenticError {\n  constructor(\n    public resourceType: 'cost' | 'tokens' | 'tool_calls',\n    public currentValue: number,\n    public limit: number\n  ) {\n    super(`Budget exceeded: ${resourceType} limit of ${limit} exceeded (current: ${currentValue})`);\n    this.name = 'BudgetExceededError';\n  }\n}\n\nexport class MaxIterationsError extends OpenAgenticError {\n  constructor(maxIterations: number) {\n    super(`Maximum iterations reached: ${maxIterations}`);\n    this.name = 'MaxIterationsError';\n  }\n}\n\nexport class ValidationError extends OpenAgenticError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}","import type { AIModel, Message } from '../types';\nimport { ProviderError } from './errors';\n\ninterface AIResponse {\n  content?: string;\n  tool_calls?: Array<{\n    id: string;\n    type: 'function';\n    function: {\n      name: string;\n      arguments: string;\n    };\n  }>;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport class AIProvider {\n  private model: AIModel;\n\n  constructor(model: AIModel) {\n    this.model = model;\n  }\n\n  public async complete(\n    messages: Message[],\n    tools?: any[],\n    streaming = false\n  ): Promise<AIResponse> {\n    try {\n      return await this.completeRequest(messages, tools, streaming);\n    } catch (error) {\n      throw new ProviderError(\n        `Failed to complete request with ${this.model.provider}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  private async completeRequest(\n    messages: Message[],\n    tools?: any[],\n    streaming = false\n  ): Promise<AIResponse> {\n    // Check browser environment for Node.js-only providers\n    if (typeof globalThis !== 'undefined' && 'window' in globalThis) {\n      throw new ProviderError('AI providers not available in browser environment');\n    }\n\n    try {\n      // Import AI SDK functions\n      const { generateText } = await import('ai');\n      \n      // Create the appropriate provider\n      const provider = await this.createProvider();\n      \n      // Execute with the provider\n      return await this.executeWithProvider(provider, messages, tools, streaming, generateText);\n    } catch (error) {\n      throw new ProviderError(`AI SDK error: ${error}`);\n    }\n  }\n\n  private async createProvider(): Promise<any> {\n    const apiKey = this.model.apiKey || '';\n    \n    switch (this.model.provider) {\n      case 'openai': {\n        const { createOpenAI } = await import('@ai-sdk/openai');\n        return createOpenAI({\n          baseURL: this.model.baseURL,\n          apiKey,\n        });\n      }\n      \n      case 'anthropic': {\n        const { createAnthropic } = await import('@ai-sdk/anthropic');\n        return createAnthropic({ apiKey });\n      }\n      \n      case 'google': {\n        const { createGoogleGenerativeAI } = await import('@ai-sdk/google');\n        return createGoogleGenerativeAI({ apiKey });\n      }\n      \n      case 'google-vertex': {\n        const { createVertex } = await import('@ai-sdk/google-vertex');\n        return createVertex({\n          project: this.model.project || '',\n          location: this.model.location || '',\n        });\n      }\n      \n      case 'perplexity': {\n        const { createPerplexity } = await import('@ai-sdk/perplexity');\n        return createPerplexity({ apiKey });\n      }\n      \n      case 'xai': {\n        const { createXai } = await import('@ai-sdk/xai');\n        return createXai({ apiKey });\n      }\n      \n      case 'custom':\n        throw new ProviderError('Custom provider not yet implemented');\n        \n      default:\n        throw new ProviderError(`Unsupported provider: ${this.model.provider}`);\n    }\n  }\n\n  private async executeWithProvider(\n    provider: any,\n    messages: Message[],\n    tools: any[] | undefined,\n    streaming: boolean,\n    generateText: any\n  ): Promise<AIResponse> {\n    // Transform messages for AI SDK format\n    const coreMessages = this.transformMessages(messages);\n    const systemMessage = messages.find(m => m.role === 'system')?.content;\n\n    // Generate response using AI SDK\n    const result = await generateText({\n      model: provider(this.model.model),\n      messages: coreMessages,\n      system: systemMessage,\n      temperature: this.model.temperature,\n      maxTokens: this.model.maxTokens,\n      topP: this.model.topP,\n    });\n\n    return {\n      content: result.text,\n      usage: result.usage ? {\n        prompt_tokens: result.usage.promptTokens,\n        completion_tokens: result.usage.completionTokens,\n        total_tokens: result.usage.totalTokens,\n      } : {\n        prompt_tokens: 0,\n        completion_tokens: 0,\n        total_tokens: 0,\n      },\n    };\n  }\n\n  private transformMessages(messages: Message[]): any[] {\n    return messages\n      .filter(m => m.role !== 'system')\n      .map(m => {\n        if (m.role === 'user') {\n          return { role: 'user' as const, content: m.content };\n        } else if (m.role === 'assistant') {\n          return { role: 'assistant' as const, content: m.content };\n        } else if (m.role === 'tool') {\n          return { \n            role: 'tool' as const, \n            content: [{ \n              type: 'tool-result' as const, \n              toolCallId: m.toolCallId || '', \n              toolName: 'unknown',\n              result: m.content \n            }] \n          };\n        }\n        return { role: 'user' as const, content: m.content };\n      });\n  }\n}","import type { CostTracking } from '../types';\n\nconst PRICING = {\n  openai: {\n    'gpt-4': { input: 0.03, output: 0.06 }, // per 1K tokens\n    'gpt-4-turbo': { input: 0.01, output: 0.03 },\n    'gpt-3.5-turbo': { input: 0.0015, output: 0.002 },\n  },\n  anthropic: {\n    'claude-3-opus': { input: 0.015, output: 0.075 },\n    'claude-3-sonnet': { input: 0.003, output: 0.015 },\n    'claude-3-haiku': { input: 0.00025, output: 0.00125 },\n  },\n  google: {\n    'gemini-pro': { input: 0.0005, output: 0.0015 },\n  },\n};\n\nexport class CostTracker {\n  private tracking: CostTracking = {\n    inputTokens: 0,\n    outputTokens: 0,\n    toolCalls: 0,\n    estimatedCost: 0,\n  };\n\n  private budget: {\n    maxCost?: number;\n    maxTokens?: number;\n    maxToolCalls?: number;\n  } | undefined;\n\n  constructor(budget?: { maxCost?: number; maxTokens?: number; maxToolCalls?: number }) {\n    this.budget = budget;\n  }\n\n  public updateTokenUsage(inputTokens: number, outputTokens: number): void {\n    this.tracking.inputTokens += inputTokens;\n    this.tracking.outputTokens += outputTokens;\n    this.updateEstimatedCost();\n  }\n\n  public incrementToolCalls(cost = 0): void {\n    this.tracking.toolCalls += 1;\n    this.tracking.estimatedCost += cost;\n  }\n\n  public getTracking(): CostTracking {\n    return { ...this.tracking };\n  }\n\n  public checkBudget(): {\n    withinBudget: boolean;\n    violations: string[];\n  } {\n    const violations: string[] = [];\n\n    if (this.budget?.maxCost && this.tracking.estimatedCost >= this.budget.maxCost) {\n      violations.push(`Cost limit exceeded: $${this.tracking.estimatedCost.toFixed(4)} >= $${this.budget.maxCost}`);\n    }\n\n    if (this.budget?.maxTokens && (this.tracking.inputTokens + this.tracking.outputTokens) >= this.budget.maxTokens) {\n      violations.push(`Token limit exceeded: ${this.tracking.inputTokens + this.tracking.outputTokens} >= ${this.budget.maxTokens}`);\n    }\n\n    if (this.budget?.maxToolCalls && this.tracking.toolCalls >= this.budget.maxToolCalls) {\n      violations.push(`Tool call limit exceeded: ${this.tracking.toolCalls} >= ${this.budget.maxToolCalls}`);\n    }\n\n    return {\n      withinBudget: violations.length === 0,\n      violations,\n    };\n  }\n\n  public reset(): void {\n    this.tracking = {\n      inputTokens: 0,\n      outputTokens: 0,\n      toolCalls: 0,\n      estimatedCost: 0,\n    };\n  }\n\n  private updateEstimatedCost(): void {\n    // This is a simplified cost calculation\n    // In practice, you'd need to know the specific model and provider\n    const avgInputCost = 0.01 / 1000; // Average input cost per token\n    const avgOutputCost = 0.02 / 1000; // Average output cost per token\n\n    this.tracking.estimatedCost = \n      (this.tracking.inputTokens * avgInputCost) +\n      (this.tracking.outputTokens * avgOutputCost);\n  }\n}","import type { Tool } from '../types';\nimport { ToolError } from './errors';\n\nexport class ToolRegistry {\n  private tools: Map<string, Tool> = new Map();\n  private usedTools: Set<string> = new Set();\n\n  constructor(tools: Tool[] = []) {\n    tools.forEach(tool => this.registerTool(tool));\n  }\n\n  public registerTool(tool: Tool): void {\n    if (this.tools.has(tool.name)) {\n      throw new ToolError(`Tool '${tool.name}' is already registered`);\n    }\n    this.tools.set(tool.name, tool);\n  }\n\n  public unregisterTool(name: string): boolean {\n    return this.tools.delete(name);\n  }\n\n  public async executeTool(name: string, parameters: Record<string, any>): Promise<any> {\n    const tool = this.tools.get(name);\n    if (!tool) {\n      throw new ToolError(`Tool '${name}' not found`);\n    }\n\n    try {\n      // Validate parameters\n      this.validateParameters(tool, parameters);\n      \n      // Mark tool as used\n      this.usedTools.add(name);\n      \n      // Execute the tool\n      const result = await tool.execute(parameters);\n      return result;\n    } catch (error) {\n      throw new ToolError(\n        `Failed to execute tool '${name}': ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  public getToolDefinitions(): any[] {\n    return Array.from(this.tools.values()).map(tool => ({\n      name: tool.name,\n      description: tool.description,\n      parameters: tool.parameters,\n    }));\n  }\n\n  public getUsedTools(): string[] {\n    return Array.from(this.usedTools);\n  }\n\n  public getTool(name: string): Tool | undefined {\n    return this.tools.get(name);\n  }\n\n  public getAllTools(): Tool[] {\n    return Array.from(this.tools.values());\n  }\n\n  public reset(): void {\n    this.usedTools.clear();\n  }\n\n  private validateParameters(tool: Tool, parameters: Record<string, any>): void {\n    const required = Object.entries(tool.parameters)\n      .filter(([, param]) => param.required)\n      .map(([name]) => name);\n\n    for (const requiredParam of required) {\n      if (!(requiredParam in parameters)) {\n        throw new ToolError(\n          `Missing required parameter '${requiredParam}' for tool '${tool.name}'`\n        );\n      }\n    }\n\n    // Basic type validation\n    for (const [paramName, paramValue] of Object.entries(parameters)) {\n      const paramSchema = tool.parameters[paramName];\n      if (!paramSchema) continue;\n\n      if (!this.validateParameterType(paramValue, paramSchema.type)) {\n        throw new ToolError(\n          `Invalid type for parameter '${paramName}' in tool '${tool.name}'. Expected ${paramSchema.type}, got ${typeof paramValue}`\n        );\n      }\n    }\n  }\n\n  private validateParameterType(value: any, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'number':\n        return typeof value === 'number';\n      case 'boolean':\n        return typeof value === 'boolean';\n      case 'object':\n        return typeof value === 'object' && value !== null && !Array.isArray(value);\n      case 'array':\n        return Array.isArray(value);\n      default:\n        return true; // Unknown type, allow it\n    }\n  }\n}"],"mappings":"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","names":[]}