import 'dotenv/config';
import * as fs from 'fs/promises';
import { 
  initializeS3,
  testS3Connection,
  uploadImageToS3,
  uploadAudioToS3,
  uploadHtmlToS3,
  uploadFileWithDetails,
  batchUploadToS3,
  generateImageFileName,
  generateAudioFileName,
  generateHtmlFileName,
  type UploadResult
} from '../../src/utils/s3';

async function s3UploadExample() {
  console.log('üöÄ AWS S3 Upload Example\n');

  // =============================================================================
  // EXAMPLE 1: Initialize and Test S3 Connection
  // =============================================================================
  console.log('üìù Example 1: Initialize and Test S3 Connection');
  
  try {
    // Initialize S3 utility
    const initSuccess = await initializeS3();
    if (!initSuccess) {
      console.error('‚ùå Failed to initialize S3. Check your environment variables.');
      return;
    }

    // Test connection
    const connectionTest = await testS3Connection();
    if (!connectionTest) {
      console.error('‚ùå S3 connection test failed.');
      return;
    }

    console.log('‚úÖ S3 initialization and connection test successful\n');
  } catch (error) {
    console.error('‚ùå S3 setup failed:', error);
    return;
  }

  console.log('='.repeat(80) + '\n');

  // =============================================================================
  // EXAMPLE 2: Upload a Generated Image
  // =============================================================================
  console.log('üìù Example 2: Upload Generated Image');
  
  try {
    // Generate a simple test image (1x1 pixel PNG)
    const pngData = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
      0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE, 0x00, 0x00, 0x00,
      0x0C, 0x49, 0x44, 0x41, 0x54, 0x08, 0xD7, 0x63, 0xF8, 0x0F, 0x00, 0x00,
      0x01, 0x00, 0x01, 0x5C, 0xC2, 0x8A, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x49,
      0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
    ]);

    const imageFileName = generateImageFileName('test image for S3 upload', 'png');
    console.log(`Generated filename: ${imageFileName}`);

    const imageUrl = await uploadImageToS3(
      pngData,
      imageFileName,
      'image/png',
      'Test image upload to S3'
    );

    console.log('‚úÖ Image uploaded successfully');
    console.log(`üì∏ Image URL: ${imageUrl}`);
  } catch (error) {
    console.error('‚ùå Image upload failed:', error);
  }

  console.log('\n' + '='.repeat(80) + '\n');

  // =============================================================================
  // EXAMPLE 3: Upload HTML Content
  // =============================================================================
  console.log('üìù Example 3: Upload HTML Content');
  
  try {
    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>S3 Upload Test Page</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        h1 { color: #fff; text-align: center; }
        .info { background: rgba(255, 255, 255, 0.2); padding: 15px; border-radius: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ S3 Upload Test Page</h1>
        <div class="info">
            <p><strong>Upload Time:</strong> ${new Date().toISOString()}</p>
            <p><strong>Generated by:</strong> OpenAgentic S3 Utility</p>
            <p><strong>Status:</strong> Successfully uploaded to AWS S3</p>
        </div>
        <p>This HTML page was dynamically generated and uploaded to S3 using the OpenAgentic framework's S3 utility.</p>
    </div>
</body>
</html>`.trim();

    const htmlFileName = generateHtmlFileName('s3 test page', 'html');
    console.log(`Generated HTML filename: ${htmlFileName}`);

    const htmlUrl = await uploadHtmlToS3(
      htmlContent,
      htmlFileName,
      'text/html',
      'Test HTML page upload to S3'
    );

    console.log('‚úÖ HTML uploaded successfully');
    console.log(`üåê HTML URL: ${htmlUrl}`);
    console.log('üí° You can visit this URL in your browser to see the page');
  } catch (error) {
    console.error('‚ùå HTML upload failed:', error);
  }

  console.log('\n' + '='.repeat(80) + '\n');

  // =============================================================================
  // EXAMPLE 4: Upload with Detailed Results
  // =============================================================================
  console.log('üìù Example 4: Upload with Detailed Results');
  
  try {
    // Create a test text file
    const textContent = `
OpenAgentic S3 Upload Test
=========================

This is a test file uploaded using the OpenAgentic S3 utility.

Features demonstrated:
- File upload with detailed results
- Automatic content type detection
- Metadata and descriptions
- Error handling
- File size validation

Upload time: ${new Date().toISOString()}
Generated by: OpenAgentic Framework
    `.trim();

    const textBuffer = Buffer.from(textContent);
    const textFileName = `test-document-${Date.now()}.txt`;

    const result: UploadResult = await uploadFileWithDetails(
      textBuffer,
      textFileName,
      {
        directory: 'documents',
        description: 'Test document with detailed upload results',
        metadata: {
          'document-type': 'test',
          'generated-by': 'openagentic',
        }
      }
    );

    console.log('‚úÖ Upload with detailed results completed');
    console.log('üìä Upload Details:');
    console.log(`   Success: ${result.success}`);
    console.log(`   URL: ${result.url}`);
    console.log(`   Key: ${result.key}`);
    console.log(`   Bucket: ${result.bucket}`);
    console.log(`   Content Type: ${result.contentType}`);
    console.log(`   Size: ${result.size} bytes`);
    console.log(`   Uploaded At: ${result.uploadedAt}`);
  } catch (error) {
    console.error('‚ùå Detailed upload failed:', error);
  }

  console.log('\n' + '='.repeat(80) + '\n');

  // =============================================================================
  // EXAMPLE 5: Batch Upload Multiple Files
  // =============================================================================
  console.log('üìù Example 5: Batch Upload Multiple Files');
  
  try {
    // Create multiple test files
    const files = [
      {
        buffer: Buffer.from('File 1 content - JSON data', 'utf-8'),
        fileName: 'test-file-1.json',
        options: { directory: 'documents', description: 'Test JSON file' }
      },
      {
        buffer: Buffer.from('File 2 content - Plain text', 'utf-8'),
        fileName: 'test-file-2.txt',
        options: { directory: 'documents', description: 'Test text file' }
      },
      {
        buffer: Buffer.from('<xml><test>File 3 content</test></xml>', 'utf-8'),
        fileName: 'test-file-3.xml',
        options: { directory: 'documents', description: 'Test XML file' }
      }
    ];

    console.log(`Preparing to upload ${files.length} files in batch...`);

    const results = await batchUploadToS3(files);

    console.log('‚úÖ Batch upload completed');
    console.log('üìä Batch Results:');
    
    results.forEach((result, index) => {
      console.log(`   File ${index + 1}:`);
      console.log(`     Success: ${result.success}`);
      if (result.success) {
        console.log(`     URL: ${result.url}`);
        console.log(`     Size: ${result.size} bytes`);
      } else {
        console.log(`     Error: ${result.error}`);
      }
    });

    const successCount = results.filter(r => r.success).length;
    const failCount = results.length - successCount;
    console.log(`üìà Summary: ${successCount} successful, ${failCount} failed`);
  } catch (error) {
    console.error('‚ùå Batch upload failed:', error);
  }

  console.log('\n' + '='.repeat(80) + '\n');

  // =============================================================================
  // EXAMPLE 6: Simulate Audio Upload (Mock Data)
  // =============================================================================
  console.log('üìù Example 6: Simulate Audio Upload');
  
  try {
    // Create a mock audio file (just example bytes)
    const mockAudioData = Buffer.alloc(1024 * 50); // 50KB of zeros (mock audio)
    mockAudioData.fill(0x80); // Fill with some data pattern

    const audioFileName = generateAudioFileName('test audio recording', 'mp3');
    console.log(`Generated audio filename: ${audioFileName}`);

    const audioUrl = await uploadAudioToS3(
      mockAudioData,
      audioFileName,
      'audio/mpeg',
      'Mock audio file for testing S3 upload'
    );

    console.log('‚úÖ Audio uploaded successfully');
    console.log(`üéµ Audio URL: ${audioUrl}`);
    console.log(`üìä File Size: ${mockAudioData.length} bytes`);
  } catch (error) {
    console.error('‚ùå Audio upload failed:', error);
  }

  console.log('\nüéâ S3 Upload Examples completed successfully!');
  console.log('\nüí° Tips:');
  console.log('- All files are uploaded to your configured S3 bucket');
  console.log('- Files are organized into directories by type');
  console.log('- Each upload includes metadata and timestamps');
  console.log('- Error handling ensures graceful failures');
  console.log('- File size limits are enforced for different file types');
}

if (require.main === module) {
  s3UploadExample().catch(console.error);
}